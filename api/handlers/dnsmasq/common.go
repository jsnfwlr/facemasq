package dnsmasq

import (
	"bytes"
	"fmt"
	"log"
	"os"
	"text/template"
	"time"

	"facemasq/lib/files"
)

type Params struct {
	GeneratedTime string
}

var DHCPFilename, DNSFilename, FileHeader string

const templateName = "dnsmasqExportedFileHeader.tmpl"

func init() {
	var err error
	FileHeader, err = getFileHeaderFromTemplate()
	if err != nil {
		FileHeader = fmt.Sprintf("# This file is auto generated by faceMasq (https://github.com/jsnfwlr/facemasq/).\n# Any manual changes to it may be wiped when faceMasq next generates this file.\n# File Generated at %s\n\n", time.Now().Format("15:04:05 2006-01-02"))
	}
	DHCPFilename = os.Getenv("DHCPFILENAME")
	if DHCPFilename == "" {
		DHCPFilename = "01.dhcp.conf"
	}
	DNSFilename = os.Getenv("DNSFILENAME")
	if DNSFilename == "" {
		DNSFilename = "02.dns.conf"
	}
}

func getTemplateFilePath() (tmplPath string, err error) {
	var templateDir string
	templateDir, err = files.GetDir("templates")
	if err != nil {
		return
	}

	tmplPath = fmt.Sprintf("%[2]s%[1]c%[3]s", os.PathSeparator, templateDir, templateName)
	return
}

func getFileHeaderFromTemplate() (fileHeader string, err error) {
	var templateParser *template.Template
	var tmplPath string

	tmplPath, err = getTemplateFilePath()
	if err != nil {
		log.Print("Unable to determine template folder location")
		return
	}

	if files.FileExists(tmplPath) {
		templateParser, err = template.ParseFiles(tmplPath)
	} else {
		templateParser, err = template.ParseFS(files.GetEmbeddedFileSystem(), fmt.Sprintf("templates/%s", templateName))
	}
	if err != nil {
		log.Printf("Error: %v", err)
		return
	}

	params := Params{
		GeneratedTime: time.Now().Format("2006-01-02 15:04:05"),
	}
	output := new(bytes.Buffer)
	err = templateParser.Execute(output, params)
	if err != nil {
		log.Printf("error executing template : %v\n", err)
		return
	}
	fileHeader = output.String()
	return
}
